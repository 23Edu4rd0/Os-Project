    def atualizar_menu_historico(self):
        """
        Atualiza o menu de histórico com as últimas ordens de serviço.
        """
        # Limpa o menu de histórico atual
        self.historico_menu.delete(0, 'end')
        
        # Obtém as últimas ordens
        try:
            ultimas_ordens = db_manager.listar_ultimas_ordens(10)
            
            if not ultimas_ordens:
                self.historico_menu.add_command(
                    label="Nenhuma ordem encontrada",
                    state="disabled"
                )
                return
                
            # Adiciona as ordens ao menu
            for ordem in ultimas_ordens:
                numero = ordem.get('numero_os', '?')
                nome = ordem.get('nome_cliente', 'Cliente')
                data = ordem.get('data_emissao', '')
                if data:
                    try:
                        # Formata a data para DD/MM/YYYY
                        data_obj = datetime.datetime.strptime(data, '%Y-%m-%d %H:%M:%S')
                        data = data_obj.strftime('%d/%m/%Y')
                    except:
                        pass
                
                label = f"OS {numero:04d} - {nome[:20]} - {data}"
                
                # Cria uma função que carrega essa OS específica
                # Usa uma função lambda com closure para capturar o valor atual
                self.historico_menu.add_command(
                    label=label,
                    command=lambda o=ordem: self.carregar_os_antiga(o)
                )
        except Exception as e:
            print(f"Erro ao atualizar menu de histórico: {e}")
            self.historico_menu.add_command(
                label="Erro ao carregar histórico",
                state="disabled"
            )

    def carregar_os_antiga(self, ordem):
        """
        Carrega uma OS antiga nos campos do formulário.
        
        Args:
            ordem (dict): Dicionário com os dados da ordem
        """
        # Perguntar ao usuário se deseja carregar os dados
        resposta = messagebox.askyesno(
            "Carregar OS Antiga",
            f"Deseja carregar os dados da OS {ordem.get('numero_os')}?\n"
            f"Cliente: {ordem.get('nome_cliente')}\n"
            f"Data: {ordem.get('data_emissao')}"
        )
        
        if not resposta:
            return
            
        # Limpa os campos atuais
        self.limpar_campos()
        
        # Preenche com os dados da OS antiga
        # Nome do cliente
        if ordem.get('nome_cliente'):
            self.nome_cliente_entry.delete(0, 'end')
            self.nome_cliente_entry.insert(0, ordem.get('nome_cliente', ''))
            
        # CPF
        if ordem.get('cpf_cliente'):
            self.cpf_entry.delete(0, 'end')
            self.cpf_entry.insert(0, ordem.get('cpf_cliente', ''))
            
        # Telefone
        if ordem.get('telefone_cliente'):
            self.telefone_entry.delete(0, 'end')
            self.telefone_entry.insert(0, ordem.get('telefone_cliente', ''))
            
        # Detalhes do produto
        if ordem.get('detalhes_produto'):
            self.detalhes_entry.delete('1.0', 'end')
            self.detalhes_entry.insert('1.0', ordem.get('detalhes_produto', ''))
            
        # Valor do produto
        if ordem.get('valor_produto') is not None:
            self.valor_produto_entry.delete(0, 'end')
            self.valor_produto_entry.insert(0, str(ordem.get('valor_produto', '')).replace('.', ','))
            
        # Valor da entrada
        if ordem.get('valor_entrada') is not None:
            self.valor_entrada_entry.delete(0, 'end')
            self.valor_entrada_entry.insert(0, str(ordem.get('valor_entrada', '')).replace('.', ','))
            
        # Frete
        if ordem.get('frete') is not None:
            self.frete_entry.delete(0, 'end')
            self.frete_entry.insert(0, str(ordem.get('frete', '')).replace('.', ','))
            
        # Forma de pagamento
        if ordem.get('forma_pagamento'):
            self.pagamento_combo.set(ordem.get('forma_pagamento', ''))
            
        # Prazo
        if ordem.get('prazo') is not None:
            self.prazo_entry.delete(0, 'end')
            self.prazo_entry.insert(0, str(ordem.get('prazo', '')))
            
        # Atualiza o número da OS (mas não salva ainda)
        self.numero_os = ordem.get('numero_os')
        self.numero_os_label.config(text=str(self.numero_os))
        
        # Atualiza o caminho do PDF
        self.arquivo_pdf = ordem.get('caminho_pdf', self.arquivo_pdf)
        
        messagebox.showinfo(
            "OS Carregada",
            f"Ordem de Serviço Nº {ordem.get('numero_os')} carregada com sucesso!\n"
            "Para reimprimir, clique em 'Abrir PDF' ou 'Imprimir PDF'."
        )

    def abrir_gerenciador_ordens(self):
        """
        Abre uma janela para gerenciar ordens de serviço anteriores.
        """
        # Cria uma nova janela
        gerenciador = tb.Toplevel(self.root)
        gerenciador.title("Gerenciador de Ordens de Serviço")
        gerenciador.geometry("800x600")
        gerenciador.grab_set()  # Modal
        
        # Frame de pesquisa
        pesquisa_frame = tb.Frame(gerenciador)
        pesquisa_frame.pack(fill="x", padx=10, pady=10)
        
        tb.Label(pesquisa_frame, text="Buscar por:").pack(side="left", padx=5)
        
        busca_var = tb.StringVar()
        busca_entry = tb.Entry(pesquisa_frame, width=30, textvariable=busca_var)
        busca_entry.pack(side="left", padx=5)
        
        tipo_busca = tb.StringVar(value="cliente")
        rb_cliente = tb.Radiobutton(
            pesquisa_frame, text="Cliente", 
            variable=tipo_busca, value="cliente"
        )
        rb_cliente.pack(side="left", padx=5)
        
        rb_os = tb.Radiobutton(
            pesquisa_frame, text="Número OS", 
            variable=tipo_busca, value="os"
        )
        rb_os.pack(side="left", padx=5)
        
        # Treeview para exibir resultados
        colunas = ("numero_os", "nome_cliente", "data_emissao", "valor_produto")
        
        # Frame para conter a treeview e scrollbar
        tree_frame = tb.Frame(gerenciador)
        tree_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Scrollbar vertical
        scrollbar = tb.Scrollbar(tree_frame)
        scrollbar.pack(side="right", fill="y")
        
        # Treeview
        tree = tb.Treeview(
            tree_frame, 
            columns=colunas,
            show="headings",
            selectmode="browse",
            yscrollcommand=scrollbar.set
        )
        
        # Configurar colunas
        tree.heading("numero_os", text="OS Nº")
        tree.heading("nome_cliente", text="Cliente")
        tree.heading("data_emissao", text="Data Emissão")
        tree.heading("valor_produto", text="Valor")
        
        tree.column("numero_os", width=60, anchor="center")
        tree.column("nome_cliente", width=200)
        tree.column("data_emissao", width=100, anchor="center")
        tree.column("valor_produto", width=100, anchor="e")
        
        tree.pack(fill="both", expand=True)
        
        # Configurar scrollbar
        scrollbar.config(command=tree.yview)
        
        # Frame de botões
        botoes_frame = tb.Frame(gerenciador)
        botoes_frame.pack(fill="x", padx=10, pady=10)
        
        # Função para carregar ordens na treeview
        def carregar_ordens():
            # Limpa a treeview
            for item in tree.get_children():
                tree.delete(item)
                
            # Obtém as últimas ordens
            try:
                if busca_var.get():
                    if tipo_busca.get() == "cliente":
                        ordens = db_manager.buscar_ordem_por_cliente(busca_var.get())
                    else:
                        try:
                            numero_os = int(busca_var.get())
                            ordem = db_manager.buscar_ordem_por_numero(numero_os)
                            ordens = [ordem] if ordem else []
                        except ValueError:
                            messagebox.showerror(
                                "Erro", 
                                "Número de OS inválido. Informe apenas números."
                            )
                            return
                else:
                    ordens = db_manager.listar_ultimas_ordens(100)
                
                # Adiciona as ordens à treeview
                for ordem in ordens:
                    if not ordem:
                        continue
                        
                    # Formata data
                    data = ordem.get('data_emissao', '')
                    if data:
                        try:
                            data_obj = datetime.datetime.strptime(data, '%Y-%m-%d %H:%M:%S')
                            data_fmt = data_obj.strftime('%d/%m/%Y')
                        except:
                            data_fmt = data
                    else:
                        data_fmt = ''
                    
                    # Formata valor
                    valor = ordem.get('valor_produto')
                    if valor is not None:
                        valor_fmt = f"R$ {valor:.2f}".replace('.', ',')
                    else:
                        valor_fmt = ''
                    
                    tree.insert(
                        "", "end",
                        values=(
                            ordem.get('numero_os', ''),
                            ordem.get('nome_cliente', ''),
                            data_fmt,
                            valor_fmt
                        ),
                        tags=(str(ordem.get('id')),)  # Usamos o ID como tag para recuperar depois
                    )
                    
                # Mensagem se não encontrar nada
                if not ordens:
                    messagebox.showinfo(
                        "Busca", 
                        "Nenhuma ordem encontrada com os critérios informados."
                    )
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao carregar ordens: {e}")
        
        # Função para carregar uma ordem selecionada
        def carregar_ordem_selecionada():
            selecionado = tree.selection()
            if not selecionado:
                messagebox.showerror("Erro", "Nenhuma ordem selecionada.")
                return
                
            # Obtém o ID da ordem (que está na tag)
            item_id = tree.item(selecionado, "tags")[0]
            try:
                # Busca a ordem com base no número da OS
                os_num = tree.item(selecionado, "values")[0]
                ordem = db_manager.buscar_ordem_por_numero(int(os_num))
                
                if ordem:
                    gerenciador.destroy()  # Fecha a janela do gerenciador
                    self.carregar_os_antiga(ordem)
                else:
                    messagebox.showerror("Erro", "Ordem não encontrada no banco de dados.")
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao carregar ordem: {e}")
        
        # Função para abrir o PDF de uma ordem selecionada
        def abrir_pdf_selecionado():
            selecionado = tree.selection()
            if not selecionado:
                messagebox.showerror("Erro", "Nenhuma ordem selecionada.")
                return
                
            # Obtém o número da OS
            os_num = tree.item(selecionado, "values")[0]
            try:
                # Busca a ordem
                ordem = db_manager.buscar_ordem_por_numero(int(os_num))
                
                if not ordem:
                    messagebox.showerror("Erro", "Ordem não encontrada no banco de dados.")
                    return
                    
                # Verifica se o PDF existe
                caminho_pdf = ordem.get('caminho_pdf')
                if not caminho_pdf or not os.path.exists(caminho_pdf):
                    messagebox.showerror(
                        "Erro", 
                        f"PDF não encontrado: {caminho_pdf}\n"
                        "O arquivo pode ter sido movido ou excluído."
                    )
                    return
                
                # Abre o PDF
                try:
                    sistema = platform.system()
                    if sistema == "Windows":
                        os.startfile(caminho_pdf)
                    elif sistema == "Darwin":  # macOS
                        subprocess.run(["open", caminho_pdf])
                    else:  # Linux
                        subprocess.run(["xdg-open", caminho_pdf])
                    
                except Exception as e:
                    messagebox.showerror("Erro", f"Erro ao abrir PDF: {e}")
            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao buscar ordem: {e}")
        
        # Botão de Buscar
        btn_buscar = tb.Button(
            pesquisa_frame, text="Buscar", 
            command=carregar_ordens, bootstyle=SUCCESS
        )
        btn_buscar.pack(side="left", padx=5)
        
        # Enter na caixa de pesquisa também busca
        busca_entry.bind("<Return>", lambda e: carregar_ordens())
        
        # Botões de ação
        btn_carregar = tb.Button(
            botoes_frame, text="Carregar OS", 
            command=carregar_ordem_selecionada, bootstyle=PRIMARY, width=15
        )
        btn_carregar.pack(side="left", padx=5)
        
        btn_abrir_pdf = tb.Button(
            botoes_frame, text="Abrir PDF", 
            command=abrir_pdf_selecionado, bootstyle=INFO, width=15
        )
        btn_abrir_pdf.pack(side="left", padx=5)
        
        btn_imprimir = tb.Button(
            botoes_frame, text="Imprimir", 
            command=lambda: self.imprimir_os_selecionada(tree), bootstyle=WARNING, width=15
        )
        btn_imprimir.pack(side="left", padx=5)
        
        btn_fechar = tb.Button(
            botoes_frame, text="Fechar", 
            command=gerenciador.destroy, bootstyle=DANGER, width=15
        )
        btn_fechar.pack(side="right", padx=5)
        
        # Duplo clique na treeview carrega a ordem
        tree.bind("<Double-1>", lambda e: carregar_ordem_selecionada())
        
        # Carrega as ordens iniciais
        carregar_ordens()

    def imprimir_os_selecionada(self, tree):
        """
        Imprime a OS selecionada no gerenciador.
        """
        selecionado = tree.selection()
        if not selecionado:
            messagebox.showerror("Erro", "Nenhuma ordem selecionada.")
            return
            
        # Obtém o número da OS
        os_num = tree.item(selecionado, "values")[0]
        
        try:
            # Busca a ordem
            ordem = db_manager.buscar_ordem_por_numero(int(os_num))
            
            if not ordem:
                messagebox.showerror("Erro", "Ordem não encontrada no banco de dados.")
                return
                
            # Verifica se o PDF existe
            caminho_pdf = ordem.get('caminho_pdf')
            if not caminho_pdf or not os.path.exists(caminho_pdf):
                messagebox.showerror(
                    "Erro", 
                    f"PDF não encontrado: {caminho_pdf}\n"
                    "O arquivo pode ter sido movido ou excluído."
                )
                return
            
            # Imprime o PDF
            info_impressao = verificar_disponibilidade_impressao()
            sucesso, mensagem = imprimir_pdf_service(caminho_pdf)
            
            if sucesso:
                if mensagem:
                    # Se há mensagem, é provavelmente um fallback (abertura manual)
                    messagebox.showinfo(
                        "PDF Aberto", 
                        f"{mensagem}\n\n"
                        "O PDF foi aberto com o programa padrão. "
                        "Para imprimir, use Ctrl+P no programa aberto."
                    )
                else:
                    # Impressão direta bem-sucedida
                    messagebox.showinfo(
                        "Impressão", 
                        "PDF enviado para impressão com sucesso!"
                    )
            else:
                # Erro na impressão
                messagebox.showerror("Erro de Impressão", mensagem)
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao imprimir ordem: {e}")
            
    def buscar_os_por_numero(self):
        """
        Busca uma ordem de serviço pelo número.
        """
        # Solicita o número da OS
        from tkinter.simpledialog import askinteger
        numero = askinteger(
            "Buscar OS", 
            "Informe o número da OS:",
            minvalue=1
        )
        
        if not numero:
            return
            
        # Busca a ordem
        try:
            ordem = db_manager.buscar_ordem_por_numero(numero)
            
            if ordem:
                self.carregar_os_antiga(ordem)
            else:
                messagebox.showinfo(
                    "Busca", 
                    f"Ordem de Serviço Nº {numero} não encontrada."
                )
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao buscar ordem: {e}")
            
    def limpar_campos(self):
        """
        Limpa todos os campos do formulário.
        """
        self.nome_cliente_entry.delete(0, 'end')
        self.cpf_entry.delete(0, 'end')
        self.telefone_entry.delete(0, 'end')
        self.detalhes_entry.delete('1.0', 'end')
        self.valor_produto_entry.delete(0, 'end')
        self.valor_entrada_entry.delete(0, 'end')
        self.frete_entry.delete(0, 'end')
        self.pagamento_combo.set('')
        self.prazo_entry.delete(0, 'end')
        
        # Readiciona os placeholders
        self.add_placeholder(
            self.nome_cliente_entry, "Digite o nome do cliente"
        )
        self.add_placeholder(
            self.cpf_entry, "Somente números, 11 dígitos"
        )
        self.add_placeholder(
            self.telefone_entry, "Ex: 37999999999"
        )
        self.add_placeholder(
            self.valor_produto_entry, "Ex: 100,00"
        )
        self.add_placeholder(
            self.valor_entrada_entry, "Ex: 50,00"
        )
        self.add_placeholder(
            self.frete_entry, "Ex: 10,00"
        )
        self.add_placeholder(
            self.prazo_entry,
            "Insira o número de dias. Ex: 30 -> daqui a 30 dias"
        )
